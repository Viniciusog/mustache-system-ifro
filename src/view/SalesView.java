/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.BillReceiveDAO;
import dao.ClientDAO;
import dao.EmployeeDAO;
import dao.ProductDAO;
import dao.ProductSaleDAO;
import dao.SaleDAO;
import dao.ServiceSale;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.BillReceive;
import model.Client;
import model.Employee;
import model.Product;
import model.ProductSale;
import model.Sale;
import model.ServiceEmployee;
import util.Alert;

/**
 *
 * @author vinij
 */
public class SalesView extends javax.swing.JDialog {

    private static List<ProductSale> productsSale = new ArrayList<ProductSale>();
    private static List<Client> clients = new ArrayList<Client>();
    private static List<Employee> employees = new ArrayList<Employee>();

    private static List<ServiceEmployee> servicesAndEmployees = new ArrayList<ServiceEmployee>();

    private static String descricao, data, dataVencimento;
    private static int qtdInstallments, indexClient, indexEmployee;

    private static Double totalValue = 0.0;

    /**
     * Creates new form SalesView
     */
    public SalesView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);

        clients = ClientDAO.getListClient("");
        for (Client c : clients) {
            cbClient.addItem(c.getPerson().getName() + "," + c.getPerson().getCpf());
        }

        employees = EmployeeDAO.getListEmployee("");
        for (Employee e : employees) {
            cbEmployees.addItem(e.getPerson().getName() + "," + e.getPerson().getCpf());
        }

        if (descricao != null && data != null && dataVencimento != null
                && qtdInstallments > 0
                && indexClient > -2 && indexEmployee > -2) {
            edDescription.setText(descricao);
            edDate.setText(data);
            edDataVencimento.setText(dataVencimento);
            edInstallments.setText(String.valueOf(qtdInstallments));
            cbClient.setSelectedIndex(indexClient);
            cbEmployees.setSelectedIndex(indexEmployee);
        }

        edTotalValue.setText(String.valueOf(totalValue));

    }

    public static Double getTotalValue() {
        return totalValue;
    }

    public static void addTotalValue(Double tv) {
        totalValue += tv;
    }

    public static void removeTotalValue(Double tv) {
        totalValue -= tv;

    }

    public int getInstallmentsText() {
        return Integer.parseInt(edInstallments.getText());
    }

    public String getDescription() {
        return edDescription.getText();
    }

    public String getDataVencimento() {
        return edDataVencimento.getText();
    }

    public String getData() {
        return edDate.getText();
    }

    public void setInstallmentsText(int qtdInstallment) {
        edInstallments.setText(String.valueOf(qtdInstallment));
    }

    public void setDescription(String description) {
        edDescription.setText(description);
    }

    public void setDataVencimento(String dataVencimento) {
        edDataVencimento.setText(dataVencimento);
    }

    public void setData(String data) {
        edDate.setText(data);
    }

    public static List<ProductSale> getProductsSale() {
        return productsSale;
    }

    public static void addProductsSale(ProductSale p) {
        productsSale.add(p);
        /*
        boolean exists = false;
        for (ProductSale ps : productsSale) {
            if (p.getProduct().getId() == ps.getProduct().getId()) {
                exists = true;
            }
        }
        if (exists) {
            Alert.showWarningMessageDialog("Já existe esse produto na tabela de venda!"
                    + "\nVocê pode mudar a quantidade dele na tabela de venda.");
        } else {
            //productsSale.add(p);
        }*/
    }

    public static List<ServiceEmployee> getServicesAndEmployees() {
        return servicesAndEmployees;
    }

    //fgu
    public static void addServicesAndEmployees(ServiceEmployee se) {
        servicesAndEmployees.add(se);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXMultiSplitPane1 = new org.jdesktop.swingx.JXMultiSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        cbClient = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cbEmployees = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProducts = new javax.swing.JTable();
        btSelectProduct = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btDeleteProduct = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableServices = new javax.swing.JTable();
        btSelectService = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        btDeleteService = new javax.swing.JButton();
        btRegisterSale = new javax.swing.JButton();
        edDescription = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        edDate = new javax.swing.JFormattedTextField();
        edDataVencimento = new javax.swing.JFormattedTextField();
        edInstallments = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        edTotalValue = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Realizar venda");
        setResizable(false);

        jTabbedPane1.setBackground(new java.awt.Color(60, 60, 60));
        jTabbedPane1.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTabbedPane1.setOpaque(true);

        jPanel1.setBackground(new java.awt.Color(90, 90, 90));
        jPanel1.setLayout(null);

        cbClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbClientActionPerformed(evt);
            }
        });
        jPanel1.add(cbClient);
        cbClient.setBounds(40, 100, 221, 26);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REALIZAR VENDA");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(330, 20, 210, 32);

        jPanel1.add(cbEmployees);
        cbEmployees.setBounds(280, 100, 221, 26);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("FUNCIONÁRIO");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(280, 80, 97, 20);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("PARCELAS");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(680, 80, 69, 20);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("VALOR TOTAL");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(520, 80, 99, 20);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("DATA");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(520, 130, 49, 20);

        jTabbedPane2.setBackground(new java.awt.Color(60, 60, 60));
        jTabbedPane2.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTabbedPane2.setOpaque(true);

        jPanel3.setBackground(new java.awt.Color(90, 90, 90));

        tableProducts.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "MARCA", "NOME", "PREÇO", "ESTOQUE", "QUANTIDADE VENDA"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableProducts.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tableProductsFocusGained(evt);
            }
        });
        tableProducts.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                tableProductsInputMethodTextChanged(evt);
            }
        });
        tableProducts.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tableProductsPropertyChange(evt);
            }
        });
        tableProducts.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableProductsKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableProductsKeyTyped(evt);
            }
        });
        tableProducts.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                tableProductsVetoableChange(evt);
            }
        });
        jScrollPane1.setViewportView(tableProducts);

        btSelectProduct.setBackground(new java.awt.Color(99, 154, 103));
        btSelectProduct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btSelectProduct.setForeground(new java.awt.Color(255, 255, 255));
        btSelectProduct.setText("Vender");
        btSelectProduct.setBorderPainted(false);
        btSelectProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btSelectProduct.setFocusPainted(false);
        btSelectProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectProductActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("PRODUTOS DA VENDA");

        btDeleteProduct.setBackground(new java.awt.Color(200, 76, 88));
        btDeleteProduct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btDeleteProduct.setForeground(new java.awt.Color(255, 255, 255));
        btDeleteProduct.setText("Excluir Produto");
        btDeleteProduct.setBorderPainted(false);
        btDeleteProduct.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btDeleteProduct.setFocusPainted(false);
        btDeleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteProductActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                .addComponent(btSelectProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDeleteProduct)
                .addGap(30, 30, 30))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(btDeleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btSelectProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane2.addTab("PRODUTOS", jPanel3);

        jPanel4.setBackground(new java.awt.Color(90, 90, 90));

        tableServices.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        tableServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "PREÇO", "ID DO FUNCIONÁRIO", "FUNCIONÁRIO", "Descrição"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableServices);
        if (tableServices.getColumnModel().getColumnCount() > 0) {
            tableServices.getColumnModel().getColumn(0).setResizable(false);
            tableServices.getColumnModel().getColumn(1).setResizable(false);
            tableServices.getColumnModel().getColumn(2).setResizable(false);
            tableServices.getColumnModel().getColumn(3).setResizable(false);
            tableServices.getColumnModel().getColumn(4).setResizable(false);
            tableServices.getColumnModel().getColumn(5).setResizable(false);
        }

        btSelectService.setBackground(new java.awt.Color(99, 154, 103));
        btSelectService.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btSelectService.setForeground(new java.awt.Color(255, 255, 255));
        btSelectService.setText("Vender");
        btSelectService.setBorderPainted(false);
        btSelectService.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btSelectService.setFocusPainted(false);
        btSelectService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelectServiceActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("SERVIÇOS DA VENDA");

        btDeleteService.setBackground(new java.awt.Color(200, 76, 88));
        btDeleteService.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btDeleteService.setForeground(new java.awt.Color(255, 255, 255));
        btDeleteService.setText("Excluir Serviço");
        btDeleteService.setBorderPainted(false);
        btDeleteService.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btDeleteService.setFocusPainted(false);
        btDeleteService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteServiceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 815, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btSelectService, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDeleteService)
                .addGap(30, 30, 30))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btDeleteService, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel8)
                        .addComponent(btSelectService, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(11, 11, 11)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jTabbedPane2.addTab("SERVIÇOS", jPanel4);

        jPanel1.add(jTabbedPane2);
        jTabbedPane2.setBounds(0, 251, 840, 440);

        btRegisterSale.setBackground(new java.awt.Color(99, 154, 103));
        btRegisterSale.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btRegisterSale.setForeground(new java.awt.Color(255, 255, 255));
        btRegisterSale.setText("CADASTRAR VENDA");
        btRegisterSale.setBorderPainted(false);
        btRegisterSale.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btRegisterSale.setFocusPainted(false);
        btRegisterSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRegisterSaleActionPerformed(evt);
            }
        });
        jPanel1.add(btRegisterSale);
        btRegisterSale.setBounds(10, 196, 164, 36);
        jPanel1.add(edDescription);
        edDescription.setBounds(130, 150, 370, 26);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("DESCRIÇÃO:");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(40, 150, 90, 20);

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("DATA VENC.");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(610, 130, 90, 20);

        try {
            edDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edDate.setToolTipText("formato dd/mm/aaaa");
        jPanel1.add(edDate);
        edDate.setBounds(520, 150, 76, 26);

        try {
            edDataVencimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edDataVencimento.setToolTipText("formato dd/mm/aaaa");
        jPanel1.add(edDataVencimento);
        edDataVencimento.setBounds(610, 150, 70, 26);

        edInstallments.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        jPanel1.add(edInstallments);
        edInstallments.setBounds(680, 100, 120, 26);

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("CLIENTE");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(40, 80, 53, 20);

        edTotalValue.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,###.00"))));
        edTotalValue.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jPanel1.add(edTotalValue);
        edTotalValue.setBounds(520, 100, 140, 24);

        jTabbedPane1.addTab("REALIZAR VENDA", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 845, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btRegisterSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRegisterSaleActionPerformed
        //Percorrer tabela verificando se a quantidade de produto é menor que a do estoque
        double totalValueProductsSale = 0;
        int numberOfLinesTableProducts = tableProducts.getRowCount();
        //Percorre a tabela incrementando o valor total da venda
        for (int i = 0; i < numberOfLinesTableProducts; i++) {
            if (Integer.parseInt(tableProducts.getValueAt(i, 4).toString())
                    < Integer.parseInt(tableProducts.getValueAt(i, 5).toString())) {
                Alert.showErrorMessageDialog("Estoque insuficiente para o produto: \n"
                        + tableProducts.getValueAt(i, 2).toString() + " \nId igual a: "
                        + tableProducts.getValueAt(i, 0));
            } else {
                //Incrementa o valor total da venda
                totalValueProductsSale += Double.parseDouble(tableProducts.getValueAt(i, 3).toString())
                        * Integer.parseInt(tableProducts.getValueAt(i, 5).toString());
            }
        }

        int numberOfLinesTableServices = tableServices.getRowCount();
        double totalValueServicesSale = 0;
        for (int i = 0; i < numberOfLinesTableServices; i++) {
            totalValueServicesSale += Double.parseDouble(tableServices.getValueAt(i, 2).toString());
        }

        //Se existir um produto ou um seviço na venda
        if (numberOfLinesTableProducts > 0 || numberOfLinesTableServices > 0) {
            Object[] options = {"Cancelar", "Sim"};
            double totalValueSale = totalValueProductsSale + totalValueServicesSale;
            int response = JOptionPane.showOptionDialog(null, "Valor Total da venda: "
                    + totalValueSale + "\nDeseja continuar e cadastrar essa venda",
                    null, JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            //Valor total da venda
            edTotalValue.setText(String.valueOf(totalValueSale));
            if (response == 1) {

                Sale s = new Sale();
                if (cbClient.getSelectedIndex() > -1) {
                    s.setClient(clients.get(cbClient.getSelectedIndex()));
                    if (cbEmployees.getSelectedIndex() > -1) {
                        s.setEmployee(employees.get(cbEmployees.getSelectedIndex()));
                        if (!edDate.getText().equals("")) {
                            s.setDate(edDate.getText());

                            s.setValue(totalValueSale);
                            if (!edInstallments.getText().equals("") && Integer.parseInt(edInstallments.getText()) > 0) {
                                if (Integer.parseInt(edInstallments.getText()) == 1) {
                                    s.setPaymentKind("À Vista");
                                    s.setQtdInstallments(1);
                                } else {
                                    if (Integer.parseInt(edInstallments.getText()) > 1) {
                                        s.setPaymentKind("À Prazo");
                                        s.setQtdInstallments(Integer.parseInt(edInstallments.getText()));
                                    }
                                }
                                //Cadastrar venda
                                SaleDAO.insert(s);
                                //Chamar método que irá cadastrar itens da venda
                                registerEachProductFromSaleTable();
                                registerEachServiceFromSaleTable(s.getEmployee().getId());

                                //Criar aconta a pagar com todo o valor já pago caso for avista
                                BillReceive br = new BillReceive();
                                br.setDate_emission_bill_receive(s.getDate());
                                br.setDescription_bill_receive(edDescription.getText());
                                br.setDue_date_bill_receive(edDataVencimento.getText());
                                br.setId_client_bill_receive(s.getClient().getId());
                                br.setId_sale_bill_receive(SaleDAO.getLastSale().getId());
                                if (Integer.parseInt(edInstallments.getText()) > 1) {
                                    //A prazo
                                    br.setSettled_bill_receive(false);
                                    br.setType_bill_receive("À Prazo");
                                    br.setValueBill(0.0);
                                    br.setValueReceived(0.0);
                                } else {
                                    br.setSettled_bill_receive(true);
                                    br.setType_bill_receive("À Vista");
                                    br.setValueBill(s.getValue());
                                    br.setValueReceived(s.getValue());
                                }

                                BillReceiveDAO.insert(br);

                                //Criar conta a pagar caso não for avista
                            } else {
                                Alert.showWarningMessageDialog("Insira a quantidade de parcelas!");
                            }

                        } else {
                            Alert.showWarningMessageDialog("Insira uma data");
                        }
                    }
                } else {
                    Alert.showWarningMessageDialog("Selecione um cliente!");
                }
            }
        } else {
            Alert.showMessageDialog("Insira um produto ou serviço para realizar uma venda!");
        }
    }//GEN-LAST:event_btRegisterSaleActionPerformed

    private void btSelectServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectServiceActionPerformed
        // TODO add your handling code here:
        SalesViewSelectService sv = new SalesViewSelectService(null, rootPaneCheckingEnabled);

        if (!edInstallments.getText().equals("")
                && !edDescription.getText().equals("")
                && !edDate.equals("")
                && !edDataVencimento.equals("")
                && cbClient.getSelectedIndex() > -1
                && cbEmployees.getSelectedIndex() > -1) {

            qtdInstallments = Integer.parseInt(edInstallments.getText());
            descricao = edDescription.getText();
            data = edDate.getText();
            dataVencimento = edDataVencimento.getText();
            indexClient = cbClient.getSelectedIndex();
            indexEmployee = cbEmployees.getSelectedIndex();

            sv.setLocationRelativeTo(null);
            sv.setVisible(true);
        } else {
            Alert.showMessageDialog("Insira todos os campos para selecionar um serviço!");
        }
    }//GEN-LAST:event_btSelectServiceActionPerformed

    private void btSelectProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelectProductActionPerformed
        // TODO add your handling code here:
        SalesViewSelectProducts svsp = new SalesViewSelectProducts(null, rootPaneCheckingEnabled);

        if (!edInstallments.getText().equals("")
                && !edDescription.getText().equals("")
                && !edDate.equals("")
                && !edDataVencimento.equals("")
                && cbClient.getSelectedIndex() > -1
                && cbEmployees.getSelectedIndex() > -1) {

            qtdInstallments = Integer.parseInt(edInstallments.getText());
            descricao = edDescription.getText();
            data = edDate.getText();
            dataVencimento = edDataVencimento.getText();
            indexClient = cbClient.getSelectedIndex();
            indexEmployee = cbEmployees.getSelectedIndex();

            svsp.setLocationRelativeTo(null);
            svsp.setVisible(true);
        } else {
            Alert.showMessageDialog("Insira todos os campos para selecionar um produto!");
        }
    }//GEN-LAST:event_btSelectProductActionPerformed

    private void tableProductsVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_tableProductsVetoableChange
        // TODO add your handling code here:
        System.out.println("vetoable");
    }//GEN-LAST:event_tableProductsVetoableChange

    private void tableProductsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableProductsKeyTyped
        // TODO add your handling code here:
        System.out.println("key tyed");
    }//GEN-LAST:event_tableProductsKeyTyped

    private void tableProductsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableProductsKeyPressed
        // TODO add your handling code here:
        System.out.println("typed");
    }//GEN-LAST:event_tableProductsKeyPressed

    private void tableProductsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tableProductsPropertyChange
        // TODO add your handling code here:
        /*int selectedRow = tableProducts.getSelectedRow();
        if (selectedRow > -1) {
            if (Integer.parseInt(tableProducts.getValueAt(selectedRow, 4).toString())
                > Integer.parseInt(tableProducts.getValueAt(selectedRow, 5).toString())) {
                tableProducts.setValueAt(
                    productsSale.get(
                        Integer.parseInt(tableProducts.getValueAt(selectedRow, 0).toString())).getQtdProductSale(),
                    selectedRow, 5);
            } else {
                Alert.showWarningMessageDialog("Quantidade insuficiente desse produto no estoque!");
            }
        }*/
    }//GEN-LAST:event_tableProductsPropertyChange

    private void tableProductsInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_tableProductsInputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_tableProductsInputMethodTextChanged

    private void tableProductsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableProductsFocusGained
        // TODO add your handling code here:
        System.out.println("focus");
    }//GEN-LAST:event_tableProductsFocusGained

    private void cbClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbClientActionPerformed

    private void btDeleteServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteServiceActionPerformed

        int selectedRow = tableServices.getSelectedRow();
        if (selectedRow > -1) {
            servicesAndEmployees.remove(selectedRow);
            Double price = Double.parseDouble(tableServices.getValueAt(selectedRow, 2).toString());
            removeTotalValue(price);
            edTotalValue.setText(String.valueOf(totalValue));
            buildTableServicesSale();
        } else {
            Alert.showWarningMessageDialog("Selecione um serviço para deletar!");
        }
    }//GEN-LAST:event_btDeleteServiceActionPerformed

    private void btDeleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteProductActionPerformed

        int selectedRow = tableProducts.getSelectedRow();
        if (selectedRow > -1) {
            productsSale.remove(selectedRow);
            Double price = Double.parseDouble(tableProducts.getValueAt(selectedRow, 3).toString());
            Double qtd = Double.parseDouble(tableProducts.getValueAt(selectedRow, 5).toString());
            removeTotalValue(price * qtd);
            edTotalValue.setText(String.valueOf(totalValue));
            buildTableProductsSale();
            System.out.println("TAMANHO LISTA PRODUTOS: " + productsSale.size());
        } else {
            Alert.showWarningMessageDialog("Selecione um produto para deletar!");
        }
    }//GEN-LAST:event_btDeleteProductActionPerformed

    public void setJTabbedPanelIndex(int i) {
        jTabbedPane2.setSelectedIndex(i);
    }

    private void registerEachProductFromSaleTable() {
        try {
            int numberRows = tableProducts.getRowCount();
            Sale lastSale = SaleDAO.getLastSale();
            System.out.println("ID VENDA: " + lastSale.getId());
            for (int i = 0; i < numberRows; i++) {
                int productId = Integer.parseInt(tableProducts.getValueAt(i, 0).toString());
                ProductSaleDAO.insert(lastSale.getId(), productId);
                
                //Atualizar qtd do produto
                ProductDAO pd = new ProductDAO();
                Product p = pd.getProductById(productId);
                int productQtd = Integer.parseInt(tableProducts.getValueAt(i, 5).toString());
                ProductDAO.refreshQtdStock(productId, p.getStock() - productQtd);
            }
        } catch (Exception e) {
            System.out.println("ERRO AO SALVAR ITENS DA VENDA! " + e.getMessage());
        }
    }
    
    

    //id do funcionário que realizou o serviço
    private void registerEachServiceFromSaleTable(int employeeId) {
        try {
            int numberRows = tableServices.getRowCount();
            Sale lastSale = SaleDAO.getLastSale();
            System.out.println("A ULTIMA VENDA: "
                    + lastSale.getDate() + ", " + lastSale.getValue());
            for (int i = 0; i < numberRows; i++) {
                int serviceId = Integer.parseInt(tableServices.getValueAt(i, 0).toString());
                //AO DELETAR UM SERVIÇO, PRECISAMOS DELETAR O INDICE NA LISTA

                ServiceSale.insert(lastSale.getId(), serviceId, Integer.parseInt(tableServices.
                        getValueAt(i, 3).toString())/*employeeId*/);
            }
        } catch (Exception e) {
            System.out.println("ERRO AO SALVAR SERVIÇOS DA VENDA! " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SalesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SalesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SalesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SalesView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SalesView dialog = new SalesView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    public void buildTableServicesSale() {

        DefaultTableModel tableModel = (DefaultTableModel) tableServices.getModel();
        tableModel.setRowCount(0);
        //tableModel.setRowCount(0);
        for (int i = 0; i < servicesAndEmployees.size(); i++) {

            tableModel.addRow(
                    new Object[]{
                        servicesAndEmployees.get(i).getService().getIdService(),
                        servicesAndEmployees.get(i).getService().getName(),
                        servicesAndEmployees.get(i).getService().getPrice(),
                        servicesAndEmployees.get(i).getEmployee().getId(),
                        servicesAndEmployees.get(i).getEmployee().getPerson().getName(),
                        servicesAndEmployees.get(i).getService().getDescription()});
        }
    }

    public void buildTableProductsSale() {
        DefaultTableModel tableModel = (DefaultTableModel) tableProducts.getModel();
        //tableModel.setRowCount(0);
        tableModel.setRowCount(0);
        for (int i = 0; i < productsSale.size(); i++) {

            tableModel.addRow(
                    new Object[]{
                        productsSale.get(i).getProduct().getId(),
                        productsSale.get(i).getProduct().getBrandName(),
                        productsSale.get(i).getProduct().getName(),
                        productsSale.get(i).getProduct().getPrice(),
                        productsSale.get(i).getProduct().getStock(),
                        productsSale.get(i).getQtdProductSale()});
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDeleteProduct;
    private javax.swing.JButton btDeleteService;
    private javax.swing.JButton btRegisterSale;
    private javax.swing.JButton btSelectProduct;
    private javax.swing.JButton btSelectService;
    private javax.swing.JComboBox<String> cbClient;
    private javax.swing.JComboBox<String> cbEmployees;
    private javax.swing.JFormattedTextField edDataVencimento;
    private javax.swing.JFormattedTextField edDate;
    private javax.swing.JTextField edDescription;
    private javax.swing.JFormattedTextField edInstallments;
    private javax.swing.JFormattedTextField edTotalValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private org.jdesktop.swingx.JXMultiSplitPane jXMultiSplitPane1;
    private javax.swing.JTable tableProducts;
    private javax.swing.JTable tableServices;
    // End of variables declaration//GEN-END:variables
}
