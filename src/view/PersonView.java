/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.AddressDAO;
import dao.ClientDAO;
import dao.EmployeeDAO;
import dao.PersonDAO;
import dao.RoleDAO;
import dao.SexDAO;
import java.lang.reflect.Array;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Address;
import model.Client;
import model.Employee;
import model.Person;
import model.Role;
import model.Sex;
import util.Alert;

/**
 *
 * @author vinij
 */
public class PersonView extends javax.swing.JDialog {

    /**
     * Creates new form PersonView
     */
    private List<Role> rolesEmployee = new ArrayList<>();

    public PersonView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        buildTable("");

        panelEmployeeInfo.setVisible(false);

        RoleDAO rdao = new RoleDAO();

        System.out.println("Tamanho lista: " + rdao.getListRole("").size());
        List<Role> roles = rdao.getListRole("");
        for (Role r : roles) {
            System.out.println("Nome: " + r.getName());
            cbRole.addItem(r.getName());
        }

        rolesEmployee = roles;

        System.out.println("Roles employee size: " + rolesEmployee.size());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        rdWoman = new javax.swing.JRadioButton();
        jLabel28 = new javax.swing.JLabel();
        cbIsClient = new javax.swing.JComboBox<>();
        btCancel = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        btSave = new javax.swing.JButton();
        edName = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        cbIsEmployee = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        rdMan = new javax.swing.JRadioButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        edId = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        panelEmployeeInfo = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        edMothersName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        edFathersName = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        edEducation = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        edCTPS = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cbCivilState = new javax.swing.JComboBox<>();
        cbRole = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        edEmail = new javax.swing.JTextField();
        edSalary = new javax.swing.JFormattedTextField();
        panelEmployee = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        edCity = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        edNeighborhood = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        edStreet = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        edNumber = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        edComplement = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        edUF = new javax.swing.JTextField();
        edCEP = new javax.swing.JFormattedTextField();
        edCPF = new javax.swing.JFormattedTextField();
        edPhone = new javax.swing.JFormattedTextField();
        edBirthDay = new javax.swing.JFormattedTextField();
        jLabel19 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        btEdit = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btSearch = new javax.swing.JButton();
        edSearch = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(90, 90, 90));

        jTabbedPane1.setBackground(new java.awt.Color(60, 60, 60));
        jTabbedPane1.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane1.setFocusable(false);
        jTabbedPane1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTabbedPane1.setOpaque(true);

        jPanel2.setBackground(new java.awt.Color(90, 90, 90));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setToolTipText("");

        rdWoman.setBackground(new java.awt.Color(90, 90, 90));
        buttonGroupGender.add(rdWoman);
        rdWoman.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdWoman.setForeground(new java.awt.Color(255, 255, 255));
        rdWoman.setText("FEMININO");
        rdWoman.setFocusable(false);

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("CLIENTE");
        jLabel28.setFocusable(false);

        cbIsClient.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cbIsClient.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NÃO", "SIM" }));
        cbIsClient.setFocusable(false);
        cbIsClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIsClientcbIsClientActionPerformed(evt);
            }
        });

        btCancel.setBackground(new java.awt.Color(200, 76, 88));
        btCancel.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btCancel.setForeground(new java.awt.Color(255, 255, 255));
        btCancel.setText("Cancelar");
        btCancel.setBorderPainted(false);
        btCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btCancel.setFocusPainted(false);
        btCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel29.setForeground(new java.awt.Color(255, 255, 255));
        jLabel29.setText("DATA DE NASCIMENTO");
        jLabel29.setFocusable(false);

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel30.setForeground(new java.awt.Color(255, 255, 255));
        jLabel30.setText("CPF");
        jLabel30.setFocusable(false);

        btSave.setBackground(new java.awt.Color(99, 154, 103));
        btSave.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btSave.setForeground(new java.awt.Color(255, 255, 255));
        btSave.setText("Salvar");
        btSave.setBorderPainted(false);
        btSave.setFocusPainted(false);
        btSave.setFocusable(false);
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSavebtSaveActionPerformed(evt);
            }
        });

        edName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        edName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edNameedNameActionPerformed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel31.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setText("SEXO");
        jLabel31.setFocusable(false);

        cbIsEmployee.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cbIsEmployee.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NÃO", "SIM" }));
        cbIsEmployee.setFocusable(false);
        cbIsEmployee.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbIsEmployeeItemStateChanged(evt);
            }
        });
        cbIsEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbIsEmployeecbIsEmployeeActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("NOME");
        jLabel9.setFocusable(false);

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel32.setForeground(new java.awt.Color(255, 255, 255));
        jLabel32.setText("TELEFONE");
        jLabel32.setFocusable(false);

        rdMan.setBackground(new java.awt.Color(90, 90, 90));
        buttonGroupGender.add(rdMan);
        rdMan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        rdMan.setForeground(new java.awt.Color(255, 255, 255));
        rdMan.setText("MASCULINO");
        rdMan.setFocusable(false);

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("FUNCIONÁRIO");
        jLabel33.setFocusable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID");
        jLabel1.setFocusable(false);

        edId.setEditable(false);
        edId.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jTabbedPane2.setBackground(new java.awt.Color(90, 90, 90));
        jTabbedPane2.setForeground(new java.awt.Color(30, 30, 30));
        jTabbedPane2.setFocusable(false);
        jTabbedPane2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTabbedPane2.setOpaque(true);

        panelEmployeeInfo.setBackground(new java.awt.Color(90, 90, 90));

        jLabel10.setBackground(new java.awt.Color(255, 255, 255));
        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("SALÁRIO");

        jLabel11.setBackground(new java.awt.Color(255, 255, 255));
        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("NOME DA MÃE");

        edMothersName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel12.setBackground(new java.awt.Color(255, 255, 255));
        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("NOME DO PAI");

        edFathersName.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel13.setBackground(new java.awt.Color(255, 255, 255));
        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("GRAU INSTRUÇÃO");

        edEducation.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel14.setBackground(new java.awt.Color(255, 255, 255));
        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("CARTEIRA DE TRABALHO");

        edCTPS.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel15.setBackground(new java.awt.Color(255, 255, 255));
        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("ESTADO CIVIL");

        cbCivilState.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cbCivilState.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SOLTEIRO", "CASADO", "SEPARADO", "DIVORCIADO", "VIÚVO", " " }));

        cbRole.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        cbRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRoleActionPerformed(evt);
            }
        });

        jLabel16.setBackground(new java.awt.Color(255, 255, 255));
        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("CARGO");

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("E-MAIL");

        edEmail.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        edSalary.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getCurrencyInstance())));
        edSalary.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        edSalary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                edSalaryFocusLost(evt);
            }
        });

        javax.swing.GroupLayout panelEmployeeInfoLayout = new javax.swing.GroupLayout(panelEmployeeInfo);
        panelEmployeeInfo.setLayout(panelEmployeeInfoLayout);
        panelEmployeeInfoLayout.setHorizontalGroup(
            panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cbRole, 0, 189, Short.MAX_VALUE)
                    .addComponent(jLabel10)
                    .addComponent(edCTPS)
                    .addComponent(jLabel14)
                    .addComponent(jLabel16)
                    .addComponent(edSalary))
                .addGap(18, 18, 18)
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                        .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(edMothersName, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(0, 202, Short.MAX_VALUE))
                                    .addComponent(edFathersName)))
                            .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(cbCivilState, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(edEducation)
                                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addContainerGap())
                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                        .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(edEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        panelEmployeeInfoLayout.setVerticalGroup(
            panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(26, 26, 26))
                    .addGroup(panelEmployeeInfoLayout.createSequentialGroup()
                        .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(jLabel12))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edMothersName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edFathersName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edSalary, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edCTPS, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCivilState, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edEducation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelEmployeeInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbRole, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(edEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("DADOS DE FUNCIONÁRIO", panelEmployeeInfo);

        panelEmployee.setBackground(new java.awt.Color(90, 90, 90));

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("CEP");
        jLabel2.setFocusable(false);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("CIDADE");
        jLabel3.setFocusable(false);

        edCity.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("BAIRRO");
        jLabel4.setFocusable(false);

        edNeighborhood.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("RUA");
        jLabel5.setFocusable(false);

        edStreet.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("NÚMERO");
        jLabel6.setFocusable(false);

        edNumber.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("COMPLEMENTO");
        jLabel7.setFocusable(false);

        edComplement.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("ESTADO");
        jLabel8.setFocusable(false);

        edUF.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        try {
            edCEP.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("#####-###")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edCEP.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        javax.swing.GroupLayout panelEmployeeLayout = new javax.swing.GroupLayout(panelEmployee);
        panelEmployee.setLayout(panelEmployeeLayout);
        panelEmployeeLayout.setHorizontalGroup(
            panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeLayout.createSequentialGroup()
                .addContainerGap(76, Short.MAX_VALUE)
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(edCity, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(jLabel8)
                    .addComponent(edUF, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                    .addComponent(edCEP))
                .addGap(28, 28, 28)
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(edStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(edNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel7)
                    .addComponent(jLabel4)
                    .addComponent(edNeighborhood)
                    .addComponent(edComplement))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        panelEmployeeLayout.setVerticalGroup(
            panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelEmployeeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edCEP, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(edStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(edNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelEmployeeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edNeighborhood, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edComplement, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelEmployeeLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edUF, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edCity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("ENDEREÇO", panelEmployee);

        try {
            edCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edCPF.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        try {
            edPhone.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("(##)#####-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edPhone.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        try {
            edBirthDay.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        edBirthDay.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("CADASTRAR PESSOA");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTabbedPane2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel1)
                                            .addComponent(edId, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(cbIsClient, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel28))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel33)
                                            .addComponent(cbIsEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(edName))
                                .addGap(31, 31, 31)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel30)
                                    .addComponent(jLabel31)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(rdMan)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rdWoman))
                                    .addComponent(edCPF))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel32)
                                        .addGap(110, 110, 110))
                                    .addComponent(jLabel29)
                                    .addComponent(edPhone)
                                    .addComponent(edBirthDay))))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(299, 299, 299))))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(edId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel33)
                                        .addComponent(jLabel28))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(cbIsEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(cbIsClient, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGap(18, 18, 18)
                            .addComponent(jLabel9)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(edName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel29)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(edBirthDay, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jLabel32)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(edPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabel31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rdMan)
                            .addComponent(rdWoman))))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("CADASTRAR PESSOA", jPanel2);

        jPanel3.setBackground(new java.awt.Color(90, 90, 90));

        table.setFont(new java.awt.Font("Segoe UI", 0, 12)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NOME", "TELEFONE", "DATA DE NASCIMENTO", "CPF", "SEXO", "CLIENTE", "FUNCIONÁRIO"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(table);

        btEdit.setBackground(new java.awt.Color(87, 126, 244));
        btEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/baseline_edit_white_18dp.png"))); // NOI18N
        btEdit.setBorderPainted(false);
        btEdit.setFocusable(false);
        btEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEditActionPerformed(evt);
            }
        });

        btDelete.setBackground(new java.awt.Color(200, 76, 88));
        btDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/baseline_delete_white_18dp.png"))); // NOI18N
        btDelete.setBorderPainted(false);
        btDelete.setFocusable(false);
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });

        btSearch.setBackground(new java.awt.Color(90, 90, 90));
        btSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/baseline_search_white_18dp.png"))); // NOI18N
        btSearch.setBorderPainted(false);
        btSearch.setFocusable(false);
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });

        edSearch.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        edSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edSearchActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("LISTA DE PESSOAS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 827, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(318, 318, 318)
                .addComponent(jLabel18)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(edSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(71, 71, 71))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(edSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btDelete, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(btEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(btSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("LISTAR PESSOAS", jPanel3);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        // TODO add your handling code here:
        int numberSelectedRow = table.getSelectedRow();
        if (numberSelectedRow >= 0) {
            int idPerson = Integer.parseInt(table.getValueAt(numberSelectedRow, 0).toString());

            Object[] options = {"Cancelar", "Sim"};
            int response = JOptionPane.showOptionDialog(null, "Deseja deletar a pessoa: "
                    + table.getValueAt(numberSelectedRow, 1) + " ?",
                    null, JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

            if (response == 1) {
                /*LEMBRAR QUE PESSOA PODE TER RELAÇÃO COM OUTRAS TABELAS NA HORA DE DELETAR*/
                PersonDAO.delete(idPerson);
                buildTable("");
            }
        }
    }//GEN-LAST:event_btDeleteActionPerformed


    private void btEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEditActionPerformed

        int selectedRow = table.getSelectedRow();
        if (selectedRow >= 0) {
            PersonDAO pdao = new PersonDAO();
            Person p = pdao.getPersonByCPF(table.getValueAt(selectedRow, 4).toString());
            System.out.println("cpf: " + table.getValueAt(selectedRow, 4).toString());
            edBirthDay.setText(p.getBirthday());
            edCPF.setText(p.getCpf());
            edName.setText(p.getName());
            edPhone.setText(p.getPhoneNumber());

            String sex = p.getSex().getName();
            if (sex.equals("Feminino")) {
                rdWoman.setSelected(true);
                rdMan.setSelected(false);
            } else if (sex.equals("Masculino")) {
                rdWoman.setSelected(false);
                rdMan.setSelected(true);
            }
            boolean isClient = p.getIsClient();
            boolean isEmployee = p.getIsEmployee();
            System.out.println("É funcionário: " + isEmployee);

            if (isClient) {
                cbIsClient.setSelectedIndex(1);
            }
            if (isEmployee) {
                cbIsEmployee.setSelectedIndex(1);
            }
            edId.setText(String.valueOf(p.getId()));

            Address ad = new Address();
            ad = AddressDAO.getAddressByPersonId(p.getId());
            edCEP.setText(ad.getCep());
            edCity.setText(ad.getCity());
            edComplement.setText(ad.getComplement());
            edNeighborhood.setText(ad.getNeighborhood());
            edNumber.setText(String.valueOf(ad.getNumber()));
            edStreet.setText(ad.getStreet());
            edUF.setText(ad.getUf());

            if (p.getIsEmployee()) {

                Employee e = EmployeeDAO.getEmployeeByPersonId(p.getId());

                edCTPS.setText(e.getCtps());
                edEducation.setText(e.getEducation());
                edEmail.setText(e.getEmail());

                edSalary.setText(String.valueOf(e.getSalary()));
                edMothersName.setText(e.getMothersName());
                edFathersName.setText(e.getFathersName());
                cbCivilState.setSelectedItem(e.getCivilState());

                cbRole.setSelectedItem(e.getRole().getName());
            }
        } else {
            Alert.showMessageDialog("Selecione uma linha da tabela!");
        }
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_btEditActionPerformed

    private void cbIsEmployeecbIsEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIsEmployeecbIsEmployeeActionPerformed
        // TODO add your handling code here:

        panelEmployeeInfo.setVisible(cbIsEmployee.getSelectedIndex() == 0);

        /*if (cbIsEmployee.getSelectedIndex() == 1) {
            jTabbedPane2.(panelEmployeeInfo);
            jTabbedPane2.setTitleAt(1, "Dados Funcionário");
            if (!edId.getText().equals("")) {
                Employee e = EmployeeDAO.getEmployeeByPersonId(Integer.parseInt(edId.getText()));
                if ((e.getCtps() != null)
                        && (e.getEducation() != null)
                        && (e.getEmail() != null)
                        && (String.valueOf(e.getSalary()) != null)
                        && (e.getMothersName() != null)
                        && (e.getFathersName() != null)
                        && (e.getCivilState() != null)
                        && (e.getRole().getName() != null)) {
                    edCTPS.setText(e.getCtps());
                    edEducation.setText(e.getEducation());
                    edEmail.setText(e.getEmail());
                    edSalary.setText(String.valueOf(e.getSalary()));
                    edMothersName.setText(e.getMothersName());
                    edFathersName.setText(e.getFathersName());
                    cbCivilState.setSelectedItem(e.getCivilState());
                    cbRole.setSelectedItem(e.getRole().getName());
                }

            }
        } else if (cbIsEmployee.getSelectedIndex() == 0) {
            if (jTabbedPane2.getComponentCount() > 1) {
                jTabbedPane2.remove(1);
            }
        }*/
    }//GEN-LAST:event_cbIsEmployeecbIsEmployeeActionPerformed

    private void edNameedNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edNameedNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edNameedNameActionPerformed

    private void cbIsClientcbIsClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbIsClientcbIsClientActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbIsClientcbIsClientActionPerformed

    private void edSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_edSearchActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        // TODO add your handling code here:
        buildTable(edSearch.getText());
    }//GEN-LAST:event_btSearchActionPerformed

    private void cbIsEmployeeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbIsEmployeeItemStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_cbIsEmployeeItemStateChanged

    private void btCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelActionPerformed
        // TODO add your handling code here:
        resetComponents();
    }//GEN-LAST:event_btCancelActionPerformed

    private void cbRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRoleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbRoleActionPerformed

    private void btSavebtSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSavebtSaveActionPerformed
        // TODO add your handling code here:
        if (!rdMan.isSelected() && !rdWoman.isSelected()) {
            Alert.showWarningMessageDialog("Selecione um sexo para essa pessoa!");
        } else {
            if (!existsEmptyText()) {
                if (edId.getText().equals("")) {
                    if (cbIsClient.getSelectedIndex() == 0 && cbIsEmployee.getSelectedIndex() == 0) {
                        Alert.showWarningMessageDialog("Selecione um tipo para essa pessoa! (Cliente/Funcionário)");
                    } else {
                        Person p = new Person();
                        String name = edName.getText();
                        String phone = edPhone.getText();
                        String cpf = edCPF.getText();
                        String birhDay = edBirthDay.getText();
                        String sexName = "";
                        boolean isClient = false;
                        boolean isEmployee = false;

                        if (cbIsClient.getSelectedIndex() == 1) {
                            isClient = true;
                        }
                        if (cbIsEmployee.getSelectedIndex() == 1) {
                            isEmployee = true;
                        }
                        if (rdMan.isSelected()) {
                            sexName = "Masculino";
                        } else if (rdWoman.isSelected()) {
                            sexName = "Feminino";
                        }

                        p.setBirthday(birhDay);
                        p.setCpf(cpf);
                        p.setName(name);
                        p.setPhoneNumber(phone);

                        Sex s = SexDAO.getSexByName(sexName);
                        p.setSex(s);
                        p.setIsClient(isClient);
                        p.setIsEmployee(isEmployee);
                        //Salvar pessoa no banco de dados
                        PersonDAO.insert(p);

                        PersonDAO pdao = new PersonDAO();
                        int personId = pdao.getPersonIdByCPF(cpf);
                        p.setId(personId);

                        if (isClient) {
                            Client c = new Client();
                            c.setPerson(p);
                            ClientDAO.insert(c);
                        }

                        //Colocar aqui para cadastrar Funcionário
                        if (isEmployee) {
                            if (!existsEmptyTextEmployee()) {

                                Employee e = new Employee();
                                e.setPerson(p);
                                if (cbRole.getSelectedIndex() > -1) {
                                    e.setRole(rolesEmployee.get(cbRole.getSelectedIndex()));
                                } else {
                                    Alert.showWarningMessageDialog("Selecione um cargo para o funcionário!");
                                }
                                e.setCivilState(cbCivilState.getSelectedItem().toString());
                                e.setCtps(edCTPS.getText());
                                e.setEducation(edEducation.getText());
                                e.setEmail(edEmail.getText());
                                e.setFathersName(edFathersName.getText());
                                e.setMothersName(edMothersName.getText());
                                e.setSalary(Float.parseFloat(edSalary.getText().substring(3).replace(".","").replace(",",".")));
                                EmployeeDAO edao = new EmployeeDAO();
                                edao.insert(e);
                            }
                        }
                        //Cadastrar Endereço
                        String cep = edCEP.getText();
                        String street = edStreet.getText();
                        String neighborhood = edNeighborhood.getText();
                        String number = edNumber.getText();
                        String city = edCity.getText();
                        String complement = edComplement.getText();
                        String uf = edUF.getText();

                        Address adr = new Address();
                        adr.setCep(cep);
                        adr.setCity(city);
                        adr.setComplement(complement);
                        adr.setNeighborhood(neighborhood);
                        adr.setUf(uf);
                        adr.setStreet(street);
                        adr.setNumber(Integer.parseInt(number));
                        adr.setPerson(p);

                        AddressDAO.insert(adr);

                        buildTable("");
                        resetComponents();
                        jTabbedPane1.setSelectedIndex(1);
                    }
                } else {
                    if (cbIsClient.getSelectedIndex() == 0 && cbIsEmployee.getSelectedIndex() == 0) {
                        Alert.showWarningMessageDialog("Selecione um tipo para essa pessoa! (Cliente/Funcionário)");
                    } else {
                        Person p = new Person();
                        p.setBirthday(edBirthDay.getText());
                        p.setCpf(edCPF.getText());
                        p.setId(Integer.parseInt(edId.getText()));
                        p.setPhoneNumber(edPhone.getText());
                        p.setName(edName.getText());

                        if (rdMan.isSelected()) {
                            p.setSex(SexDAO.getSexByName("Masculino"));
                        } else if (rdWoman.isSelected()) {
                            p.setSex(SexDAO.getSexByName("Feminino"));
                        }

                        if (cbIsClient.getSelectedIndex() == 1) {
                            p.setIsClient(true);
                        }

                        if (cbIsEmployee.getSelectedIndex() == 1) {
                            p.setIsEmployee(true);
                        }

                        Address ad = new Address();
                        ad.setId(AddressDAO.getAddressIdByPersonId(p.getId()));
                        ad.setCep(edCEP.getText());
                        ad.setCity(edCity.getText());
                        ad.setComplement(edComplement.getText());
                        ad.setNeighborhood(edNeighborhood.getText());
                        ad.setNumber(Integer.parseInt(edNumber.getText()));
                        ad.setPerson(p);
                        ad.setStreet(edStreet.getText());
                        ad.setUf(edUF.getText());

                        AddressDAO.update(ad);

                        boolean itsTimeToUpdatePersonClient = false;
                        boolean itsTimeToUpdatePersonEmployee = false;
                        //Cliente
                        if (p.getIsClient()) {
                            if (String.valueOf(ClientDAO.getClientIdByPersonId(p.getId())) != null) {
                                //Existe cliente cadastrado com o id dessa pessoa
                                //Então vamos atualizar ele
                                Client c = new Client();
                                c.setId(ClientDAO.getClientIdByPersonId(p.getId()));
                                c.setPerson(p);

                                ClientDAO.update(c);
                                itsTimeToUpdatePersonClient = true;
                            } else {
                                //Não existe cliente cadastrado com o id dessa pessoa
                                //Então vamos cadastrar um
                                Client c = new Client();
                                c.setId(ClientDAO.getClientIdByPersonId(p.getId()));
                                c.setPerson(p);

                                ClientDAO.insert(c);
                                itsTimeToUpdatePersonClient = true;
                            }
                        }

                        //Empregado
                        if (p.getIsEmployee()) {
                            if (!existsEmptyTextEmployee()) {
                                if (String.valueOf(EmployeeDAO.getEmployeeIdByPersonId(p.getId())) != null
                                        && !String.valueOf(EmployeeDAO.getEmployeeIdByPersonId(p.getId())).equals("0")
                                        && !String.valueOf(EmployeeDAO.getEmployeeIdByPersonId(p.getId())).equals("")) {
                                    //Existe funcionário cadastrado para o id de pessoa
                                    Employee e = new Employee();
                                    e.setId(EmployeeDAO.getEmployeeIdByPersonId(p.getId()));
                                    e.setCtps(edCTPS.getText());
                                    e.setEducation(edEducation.getText());
                                    e.setEmail(edEmail.getText());
                                    e.setFathersName(edFathersName.getText());
                                    e.setMothersName(edMothersName.getText());
                                    e.setPerson(p);
                                    e.setSalary(Float.parseFloat(edSalary.getText()));
                                    e.setCivilState(cbCivilState.getSelectedItem().toString());
                                    //Mudar para pegar role id por nome --------------
                                    Role role = new Role();
                                    if (cbRole.getSelectedIndex() > -1) {
                                        role = RoleDAO.getRoleByName(cbRole.getSelectedItem().toString());
                                    } else {
                                        Alert.showWarningMessageDialog("Selecione um cargo para o funcionário!");
                                    }

                                    e.setRole(role);

                                    EmployeeDAO edao = new EmployeeDAO();
                                    //Se não tiver não irá atualizar

                                    edao.update(e);
                                    itsTimeToUpdatePersonEmployee = true;
                                } else {
                                    //Não existe funcionário cadastrado com o id de pessoa
                                    //Se não tem funcionário ainda, vamos criar um
                                    Employee e = new Employee();
                                    e.setPerson(p);

                                    if (cbRole.getSelectedIndex() > -1) {
                                        e.setRole(rolesEmployee.get(cbRole.getSelectedIndex()));
                                    } else {
                                        Alert.showWarningMessageDialog("Selecione um cargo para o funcionário!");
                                    }

                                    e.setCivilState(cbCivilState.getSelectedItem().toString());
                                    e.setCtps(edCTPS.getText());
                                    e.setEducation(edEducation.getText());
                                    e.setEmail(edEmail.getText());
                                    e.setFathersName(edFathersName.getText());
                                    e.setMothersName(edMothersName.getText());
                                    e.setSalary(Float.parseFloat(edSalary.getText()));
                                    EmployeeDAO edao = new EmployeeDAO();

                                    //Cadastrar funcionário e atualizar demais informações
                                    edao.insert(e);
                                    itsTimeToUpdatePersonEmployee = true;
                                }
                            }
                        }

                        if (p.getIsClient() && !p.getIsEmployee()) {
                            if (itsTimeToUpdatePersonClient) {
                                PersonDAO.update(p);
                            }
                        }
                        if (p.getIsEmployee() && !p.getIsClient()) {
                            if (itsTimeToUpdatePersonEmployee) {
                                PersonDAO.update(p);
                            }
                        }
                        if (p.getIsClient() && p.getIsEmployee()) {
                            if (itsTimeToUpdatePersonClient && itsTimeToUpdatePersonEmployee) {
                                PersonDAO.update(p);
                            }
                        }
                        buildTable("");
                        resetComponents();
                        jTabbedPane1.setSelectedIndex(1);
                    }
                }
            }
        }
    }//GEN-LAST:event_btSavebtSaveActionPerformed

    private void edSalaryFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_edSalaryFocusLost
        // TODO add your handling code here:
        if (edSalary.getText() != null) {
            String sv = edSalary.getText();
            String vsf = sv.replace("R$", "").replace(" ", "").replace(".", "").replace(",", ".");
            Double value = new Double(vsf);
            NumberFormat nf = NumberFormat.getCurrencyInstance(new Locale("pt", "BR"));
            String formattedValue = nf.format(value);
            edSalary.setText(formattedValue);
        }
    }//GEN-LAST:event_edSalaryFocusLost

    private boolean existsEmptyText() {
        boolean exists = false;
        if (edName.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um nome!");
            exists = true;
        } else if (edBirthDay.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira uma data de nascimento!");
            exists = true;
        } else if (edPhone.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um número de telefone!");
            exists = true;
        } else if (edCPF.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um CPF!");
            exists = true;
        } else if (edCEP.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um CEP!");
            exists = true;
        } else if (edCity.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira uma cidade!");
            exists = true;
        } else if (edNeighborhood.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um bairro!");
            exists = true;
        } else if (edNumber.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um número para o local!");
            exists = true;
        } else if (edStreet.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira uma rua!");
            exists = true;
        } else if (edUF.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um estado!");
            exists = true;
        }
        return exists;
    }

    private boolean existsEmptyTextEmployee() {
        boolean exists = false;
        if (edEducation.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira uma formação para o funcionário!");
            exists = true;
        } else if (edEmail.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um e-mail para o funcionário!");
            exists = true;
        } else if (edFathersName.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira o nome do pai do funcionário!");
            exists = true;
        } else if (edMothersName.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira o nome da mãe do funcionário!");
            exists = true;
        } else if (edSalary.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira um salário para o funcionário!");
            exists = true;
        } else if (edCTPS.getText().equals("")) {
            Alert.showWarningMessageDialog("Insira a carteira de trabalho do funcionário!");
            exists = true;
        }
        return exists;
    }

    private void resetComponents() {
        edBirthDay.setText("");
        edCPF.setText("");
        edName.setText("");
        edPhone.setText("");
        edSearch.setText("");
        edId.setText("");
        edCEP.setText("");
        edCTPS.setText("");
        edCity.setText("");
        edComplement.setText("");
        edEducation.setText("");
        edEmail.setText("");
        edFathersName.setText("");
        edMothersName.setText("");
        edNeighborhood.setText("");
        edNumber.setText("");
        edSalary.setText("");
        edStreet.setText("");
        edUF.setText("");
        rdMan.setSelected(false);
        rdWoman.setSelected(false);
        cbCivilState.setSelectedIndex(0);
        cbIsClient.setSelectedIndex(0);
        cbIsEmployee.setSelectedIndex(0);
        cbRole.setSelectedIndex(0);
    }

    public void buildTable(String s) {
        PersonDAO pdao = new PersonDAO();
        List<Person> people = pdao.getListPerson(s);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        String isClient, isEmployee;
        for (Person p : people) {
            if (p.getIsClient()) {
                isClient = "Sim";
            } else {
                isClient = "Não";
            }
            if (p.getIsEmployee()) {
                isEmployee = "Sim";
            } else {
                isEmployee = "Não";
            }
            model.addRow(new Object[]{p.getId(),
                p.getName(),
                p.getPhoneNumber(),
                p.getBirthday(),
                p.getCpf(),
                p.getSex().getName(),
                isClient,
                isEmployee});
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PersonView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PersonView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PersonView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PersonView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                PersonView dialog = new PersonView(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancel;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btEdit;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btSearch;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JComboBox<String> cbCivilState;
    private javax.swing.JComboBox<String> cbIsClient;
    private javax.swing.JComboBox<String> cbIsEmployee;
    private javax.swing.JComboBox<String> cbRole;
    private javax.swing.JFormattedTextField edBirthDay;
    private javax.swing.JFormattedTextField edCEP;
    private javax.swing.JFormattedTextField edCPF;
    private javax.swing.JTextField edCTPS;
    private javax.swing.JTextField edCity;
    private javax.swing.JTextField edComplement;
    private javax.swing.JTextField edEducation;
    private javax.swing.JTextField edEmail;
    private javax.swing.JTextField edFathersName;
    private javax.swing.JTextField edId;
    private javax.swing.JTextField edMothersName;
    private javax.swing.JTextField edName;
    private javax.swing.JTextField edNeighborhood;
    private javax.swing.JTextField edNumber;
    private javax.swing.JFormattedTextField edPhone;
    private javax.swing.JFormattedTextField edSalary;
    private javax.swing.JTextField edSearch;
    private javax.swing.JTextField edStreet;
    private javax.swing.JTextField edUF;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel panelEmployee;
    private javax.swing.JPanel panelEmployeeInfo;
    private javax.swing.JRadioButton rdMan;
    private javax.swing.JRadioButton rdWoman;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
